//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import '@openzeppelin/contracts/utils/Address.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';

import "./SelfValidator.sol";

// @title The Selfweb3 contract is used to provide decentralized key management services.
// @author refitor
contract SelfWeb3 is Ownable {
    using SafeMath for uint256;
    using Address for address payable;
    struct MetaData {
        address web2Address;
        uint256 registTotal;
    }
    struct SelfData {
        address wallet;         // The wallet bound by the user is used to interact with the web3 contract
        bytes recoverID;        // Used for social recovery of web3 account.
        bytes web3Key;          // Private core keys, for decrypting Webauthn ciphertext information.
        bytes web3Public;       // Private web3 public key, participate in dynamic computing sharing key.
        bytes32 verifyRoot;     // The root of merkleTree for on-chain associated validation.
    }
    MetaData private _metaData;
    mapping (address => SelfData) private _dataMap;

    /**
     * @dev constructor is used to populate the meta information of the contract.
     * @param web2Address The web2 server address.
     */
    constructor(address web2Address) {
        _metaData = MetaData(web2Address, 0);
    }

    /**
     * @dev Meta is used to load the meta information of the contract.
     */
    function Meta() view public returns (uint256 registTotal) {
        MetaData memory md = _get();
        return md.registTotal;
    }

    /**
     * @dev Register is used to register the web3 user.
     * @param selfAddress The user’s unique address in selfWeb3.
     * @param recoverID Used for social recovery of web3 account.
     * @param web3Key Private core keys, for decrypting Webauthn ciphertext information.
     * @param web3Public Private web3 public key, participate in dynamic computing sharing key.
     */
    function Register(address selfAddress, bytes calldata recoverID, bytes calldata web3Key, bytes calldata web3Public) external payable {
        require(web3Key.length != 0, "web3Key must be non-empty");
        require(recoverID.length != 0, "recoverID must be non-empty");
        require(web3Public.length != 0, "web3Public must be non-empty");
        SelfData memory sd = _getKV(selfAddress);
        require(sd.web3Public.length == 0, "duplicate registration");
        sd = SelfData(msg.sender, recoverID, web3Key, web3Public, bytes32(0));
        _setKV(selfAddress, sd);
    }

    /**
     * @dev Load is used to load the key information.
     * @param selfAddress The user’s unique address in selfWeb3.
     * @param signature signature signed by the web3 user.
     * @param message random string dynamically generated by the front end.
     */
    function Load(address selfAddress, bytes calldata signature, bytes calldata message) view external returns (bytes memory recoverID, bytes memory web3Public) {
        SelfData memory sd = _getKV(selfAddress);
        require(sd.web3Public.length != 0, "not registered yet");
        require(SelfValidator.WalletVerify(signature, message) == sd.wallet, "permission denied");
        return (sd.recoverID, sd.web3Public);
    }

    /**
     * @dev Rebind is used to rebind the wallet.
     * @param selfAddress The user’s unique address in selfWeb3.
     * @param wallet the old wallet address.
     * @param vparam Used for on-chain verification.
     */
    function Rebind(address selfAddress, address wallet, bytes calldata vparam) external payable {
        MetaData memory md = _get();
        SelfData memory sd = _getKV(selfAddress);
        require(wallet == sd.wallet, "permission denied with invalid wallet");
        require(sd.web3Public.length != 0, "not registered yet");
        require(SelfValidator.RelateVerify(selfAddress, md.web2Address, sd.verifyRoot, vparam) == sd.verifyRoot, "on-chain signature verification for wallet rebind failed");
        sd = SelfData(msg.sender, sd.recoverID, sd.web3Key, sd.web3Public, bytes32(0));
        _setKV(selfAddress, sd);
    }

    /**
     * @dev Load is used to load the key information.
     * @param selfAddress The user’s unique address in selfWeb3.
     * @param vparam Used for on-chain verification.
     */
    function Web3Key(address selfAddress, bytes calldata vparam) view external returns (bytes memory web3Key) {
        MetaData memory md = _get();
        SelfData memory sd = _getKV(selfAddress);
        require(sd.web3Public.length != 0, "not registered yet");
        require(SelfValidator.RelateVerify(selfAddress, md.web2Address, sd.verifyRoot, vparam) == sd.verifyRoot, "on-chain signature verification for Web3Key failed");
        return sd.web3Key;
    }

    /**
     * @dev Registered is used to check if the user is registered.
     * @param selfAddress The user’s unique address in selfWeb3.
     */
    function Registered(address selfAddress) view external returns (bool) {
        SelfData memory sd = _getKV(selfAddress);
        require(sd.web3Public.length != 0, "not registered yet");
        return true;
    }

    /**
     * @dev _setKV is used to set dataMap.
     * @param k the key for _datamap.
     * @param v the value for _datamap.
     */
    function _setKV(address k, SelfData memory v) internal {
        _dataMap[k] = v;
        _metaData.registTotal = _metaData.registTotal + 1;
    }

    /**
     * @dev _getKV is used to get the value by the key.
     * @param k the key for _datamap.
     */
    function _getKV(address k) view internal returns (SelfData memory sd) {
        return _dataMap[k];
    }

    /**
     * @dev _get is used to load the meta information of the contract.
     */
    function _get() view internal returns (MetaData memory md) {
        return _metaData;
    }
}